<div class="bm-wrapper">
  <div class="bm-inner">
    <div class="bm-left-block">
      <div class="left-container">
        <h2 class="bm-title">{{ section.settings.MainTitle }}</h2>
        <p class="bm-desc">{{ section.settings.MainDescription }}</p>
      </div>
    </div>
    <div class="bm-slider-wrapper swiper">
      <div class="bm-slide-conatiner swiper-wrapper">
        {% for slide in section.blocks %}
          <div class="bm-slide swiper-slide">
            <div class="img-block">
              <img src="{{ slide.settings.image_url }}" alt="">
            </div>
            <div class="slide-content">
              <div class="title-block">
                <p class="main-line">
                  {{ slide.settings.title }}
                </p>
              </div>
              <div class="commit-line">{{ slide.settings.commitment }}</div>
            </div>
          </div>
        {% endfor %}
      </div>
      <div class="swiper-pagination"></div>
      <div class="swipper-btn">
        <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "BM Slider",
   "class":"page-width",
  "settings": [
    {
      "type": "text",
      "label": "Main Title",
      "id": "MainTitle"
    },
    {
      "type": "textarea",
      "label": "Main Description",
      "id": "MainDescription"
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "url",
          "label": "Image URL",
          "id": "image_url"
        },
        {
          "type": "text",
          "label": "Title",
          "id": "title"
        },
        {
          "type": "text",
          "label": "Commitment",
          "id": "commitment"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "BM Slider",
      "category": "Custom"
    }
  ]
}
{% endschema %}

{% stylesheet %}
{% endstylesheet %}

<script>
    (function () {
    try {
      /* main variables */
      var debug = 1;
      var variation_name = "test123";
      /* helper library */
      var _$;
      !(function (factory) {
        _$ = factory();
      })(function () {
        var bm = function (s) {
          if (typeof s === "string") {
            this.value = Array.prototype.slice.call(document.querySelectorAll(s));
          }
          if (typeof s === "object") {
            this.value = [s];
          }
        };
        bm.prototype = {
          eq: function (n) {
            this.value = [this.value[n]];
            return this;
          },
          each: function (fn) {
            [].forEach.call(this.value, fn);
            return this;
          },
          log: function () {
            var items = [];
            for (let index = 0; index < arguments.length; index++) {
              items.push(arguments[index]);
            }
            console && console.log(variation_name, items);
          },
          waitForElement: function (
            selector,
            trigger,
            delayInterval,
            delayTimeout
          ) {
            var interval = setInterval(function () {
              if (_$(selector).value.length) {
                clearInterval(interval);
                trigger();
              }
            }, delayInterval);
            setTimeout(function () {
              clearInterval(interval);
            }, delayTimeout);
          },
        };
        return function (selector) {
          return new bm(selector);
        };
      });
      function live(selector, event, callback, context) {
        /****Helper Functions****/
        // helper for enabling IE 8 event bindings
        function addEvent(el, type, handler) {
          if (el.attachEvent) el.attachEvent("on" + type, handler);
          else el.addEventListener(type, handler);
        }
        // live binding helper using matchesSelector
        function live(selector, event, callback, context) {
          addEvent(context || document, event, (e) => {
            let found,
              el = e.target || e.srcElement;
            while (
              el &&
              el.matches &&
              el !== context &&
              !(found = el.matches(selector))
            )
              el = el.parentElement;
            if (found) callback.call(el, e);
          });
        }
        live(selector, event, callback, context);
      }
      function waitForjQuery(trigger) {
        var interval = setInterval(function () {
          if (window.jQuery !== undefined) {
            clearInterval(interval);
            trigger(window.jQuery);
          }
        }, 50);
        setTimeout(function () {
          clearInterval(interval);
        }, 15000);
      }

      function onwaitforswiper(trigger) {
        var interval = setInterval(function () {
          if (typeof Swiper != "undefined") {
            clearInterval(interval);
            trigger();
          }
        }, 50);
        setTimeout(function () {
          clearInterval(interval);
        }, 15000);
      }



      //add swiper slider script
      function addScript() {
        var bmScript = document.createElement("script");
        bmScript.src = "https://unpkg.com/swiper@7/swiper-bundle.min.js";
        document.getElementsByTagName("head")[0].appendChild(bmScript);
        // var bmcsslink = document.createElement("link");
        // bmcsslink.rel = "stylesheet";
        // bmcsslink.href =
        //   "https://unpkg.com/swiper@7/swiper-bundle.min.css";
        // document.getElementsByTagName("head")[0].appendChild(bmcsslink);
      }
      addScript();

    function swiperslider() {

        var swiper = new Swiper(".swiper-wrapper", {
          loop: true,
          navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
          },
          thumbs: {
            swiper: swiper_thumbnail,
          },
        });
      }






      var helper = _$();
          /* Variation Init */
      function init() {
        helper.log("Log inside from init");

        onwaitforswiper(swiperslider);
        // click event
      }

      /* Initialise variation */
      waitForjQuery(function () {
        helper.waitForElement('body', init, 50, 15000);
      });
    } catch (e) {
      if (debug) console.log(e, "error in Test" + variation_name);
    }
  })();
</script>
