{"version":3,"sources":["webpack:///../node_modules/@shopify/theme-sections/section.js","webpack:///../node_modules/@shopify/theme-sections/theme-sections.js","webpack:///../node_modules/@shopify/theme-currency/dist/currency.cjs.js","webpack:///../node_modules/@shopify/theme-product-form/listeners.js","webpack:///../node_modules/@shopify/theme-product/theme-product.js","webpack:///../node_modules/@shopify/theme-product-form/theme-product-form.js","webpack:///../node_modules/@shopify/theme-cart/request.js","webpack:///../node_modules/@shopify/theme-cart/validate.js","webpack:///../node_modules/@shopify/theme-cart/theme-cart.js"],"names":["SECTION_ID_ATTR","Section","container","properties","this","Element","TypeError","getAttribute","Error","id","extensions","Object","assign","value","onLoad","prototype","Function","onUnload","onSelect","onDeselect","onBlockSelect","onBlockDeselect","extend","extension","push","extensionClone","init","apply","defineProperty","target","varArgs","to","index","arguments","length","nextSource","nextKey","hasOwnProperty","call","writable","configurable","SECTION_TYPE_ATTR","window","Shopify","theme","sections","registered","instances","register","type","TypedSection","constructor","create","unregister","types","normalizeType","forEach","load","containers","document","querySelectorAll","normalizeContainers","filter","isInstance","unload","selector","getInstances","instance","map","e","indexOf","splice","filteredInstances","NodeList","isPrototypeOf","Array","isArray","firstElement","concat","getInstanceById","i","keys","toLowerCase","slice","designMode","addEventListener","event","detail","sectionId","querySelector","blockId","exports","formatMoney","cents","format","replace","placeholderRegex","formatString","moneyFormat","formatWithDelimiters","number","precision","thousands","decimal","isNaN","parts","toFixed","split","dollarsAmount","centsAmount","match","Listeners","entries","_validateProductStructure","product","add","element","fn","removeAll","listener","removeEventListener","selectors","getUrlWithVariant","url","test","ProductForm","options","variants","_listeners","_onSubmit","bind","optionInputs","_initInputs","onOptionChange","quantityInputs","onQuantityChange","propertyInputs","onPropertyChange","destroy","inputs","transform","reduce","input","checked","item","name","exec","variant","collection","every","option","optionArray","getVariantFromSerializedArray","propertyName","quantity","Number","parseInt","_setIdInputValue","idInputElement","createElement","appendChild","toString","dataset","_getProductFormEventData","onFormSubmit","_onFormEvent","cb","getDefaultRequestConfig","JSON","parse","stringify","credentials","headers","X-Requested-With","Content-Type","fetchJSON","config","fetch","then","response","ok","json","cart","cartChange","line","method","body","cartUpdate","validate_key","key","getState","getItemIndex","state","items","Promise","reject","getItem","lineItem","addItem","updateItem","validate_options","removeItem","clearItems","getAttributes","attributes","updateAttributes","clearAttributes","getNote","note","updateNote","clearNote","getShippingRates"],"mappings":"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","file":"vendors@template.index@template.product.js","sourcesContent":["var SECTION_ID_ATTR = 'data-section-id';\n\nexport default function Section(container, properties) {\n  this.container = validateContainerElement(container);\n  this.id = container.getAttribute(SECTION_ID_ATTR);\n  this.extensions = [];\n\n  Object.assign(this, validatePropertiesObject(properties));\n\n  this.onLoad();\n}\n\nSection.prototype = {\n  onLoad: Function.prototype,\n  onUnload: Function.prototype,\n  onSelect: Function.prototype,\n  onDeselect: Function.prototype,\n  onBlockSelect: Function.prototype,\n  onBlockDeselect: Function.prototype,\n\n  extend: function extend(extension) {\n    this.extensions.push(extension); // Save original extension\n\n    var extensionClone = Object.assign({}, extension);\n    delete extensionClone.init; // Remove init function before assigning extension properties\n    Object.assign(this, extensionClone);\n\n    if (typeof extension.init === 'function') {\n      extension.init.apply(this);\n    }\n  }\n};\n\nfunction validateContainerElement(container) {\n  if (!(container instanceof Element)) {\n    throw new TypeError(\n      'Theme Sections: Attempted to load section. The section container provided is not a DOM element.'\n    );\n  }\n  if (container.getAttribute(SECTION_ID_ATTR) === null) {\n    throw new Error(\n      'Theme Sections: The section container provided does not have an id assigned to the ' +\n        SECTION_ID_ATTR +\n        ' attribute.'\n    );\n  }\n\n  return container;\n}\n\nfunction validatePropertiesObject(value) {\n  if (\n    (typeof value !== 'undefined' && typeof value !== 'object') ||\n    value === null\n  ) {\n    throw new TypeError(\n      'Theme Sections: The properties object provided is not a valid'\n    );\n  }\n\n  return value;\n}\n\n// Object.assign() polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\nif (typeof Object.assign != 'function') {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, 'assign', {\n    value: function assign(target, varArgs) {\n      // .length of function is 2\n      'use strict';\n      if (target == null) {\n        // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {\n          // Skip over if undefined or null\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n","/*\n * @shopify/theme-sections\n * -----------------------------------------------------------------------------\n *\n * A framework to provide structure to your Shopify sections and a load and unload\n * lifecycle. The lifecycle is automatically connected to theme editor events so\n * that your sections load and unload as the editor changes the content and\n * settings of your sections.\n */\n\nimport Section from './section';\n\nvar SECTION_TYPE_ATTR = 'data-section-type';\nvar SECTION_ID_ATTR = 'data-section-id';\n\nwindow.Shopify = window.Shopify || {};\nwindow.Shopify.theme = window.Shopify.theme || {};\nwindow.Shopify.theme.sections = window.Shopify.theme.sections || {};\n\nexport var registered = (window.Shopify.theme.sections.registered =\n  window.Shopify.theme.sections.registered || {});\nexport var instances = (window.Shopify.theme.sections.instances =\n  window.Shopify.theme.sections.instances || []);\n\nexport function register(type, properties) {\n  if (typeof type !== 'string') {\n    throw new TypeError(\n      'Theme Sections: The first argument for .register must be a string that specifies the type of the section being registered'\n    );\n  }\n\n  if (typeof registered[type] !== 'undefined') {\n    throw new Error(\n      'Theme Sections: A section of type \"' +\n        type +\n        '\" has already been registered. You cannot register the same section type twice'\n    );\n  }\n\n  function TypedSection(container) {\n    Section.call(this, container, properties);\n  }\n\n  TypedSection.constructor = Section;\n  TypedSection.prototype = Object.create(Section.prototype);\n  TypedSection.prototype.type = type;\n\n  return (registered[type] = TypedSection);\n}\n\nexport function unregister(types) {\n  types = normalizeType(types);\n\n  types.forEach(function(type) {\n    delete registered[type];\n  });\n}\n\nexport function load(types, containers) {\n  types = normalizeType(types);\n\n  if (typeof containers === 'undefined') {\n    containers = document.querySelectorAll('[' + SECTION_TYPE_ATTR + ']');\n  }\n\n  containers = normalizeContainers(containers);\n\n  types.forEach(function(type) {\n    var TypedSection = registered[type];\n\n    if (typeof TypedSection === 'undefined') {\n      return;\n    }\n\n    containers = containers.filter(function(container) {\n      // Filter from list of containers because container already has an instance loaded\n      if (isInstance(container)) {\n        return false;\n      }\n\n      // Filter from list of containers because container doesn't have data-section-type attribute\n      if (container.getAttribute(SECTION_TYPE_ATTR) === null) {\n        return false;\n      }\n\n      // Keep in list of containers because current type doesn't match\n      if (container.getAttribute(SECTION_TYPE_ATTR) !== type) {\n        return true;\n      }\n\n      instances.push(new TypedSection(container));\n\n      // Filter from list of containers because container now has an instance loaded\n      return false;\n    });\n  });\n}\n\nexport function unload(selector) {\n  var instancesToUnload = getInstances(selector);\n\n  instancesToUnload.forEach(function(instance) {\n    var index = instances\n      .map(function(e) {\n        return e.id;\n      })\n      .indexOf(instance.id);\n    instances.splice(index, 1);\n    instance.onUnload();\n  });\n}\n\nexport function extend(selector, extension) {\n  var instancesToExtend = getInstances(selector);\n\n  instancesToExtend.forEach(function(instance) {\n    instance.extend(extension);\n  });\n}\n\nexport function getInstances(selector) {\n  var filteredInstances = [];\n\n  // Fetch first element if its an array\n  if (NodeList.prototype.isPrototypeOf(selector) || Array.isArray(selector)) {\n    var firstElement = selector[0];\n  }\n\n  // If selector element is DOM element\n  if (selector instanceof Element || firstElement instanceof Element) {\n    var containers = normalizeContainers(selector);\n\n    containers.forEach(function(container) {\n      filteredInstances = filteredInstances.concat(\n        instances.filter(function(instance) {\n          return instance.container === container;\n        })\n      );\n    });\n\n    // If select is type string\n  } else if (typeof selector === 'string' || typeof firstElement === 'string') {\n    var types = normalizeType(selector);\n\n    types.forEach(function(type) {\n      filteredInstances = filteredInstances.concat(\n        instances.filter(function(instance) {\n          return instance.type === type;\n        })\n      );\n    });\n  }\n\n  return filteredInstances;\n}\n\nexport function getInstanceById(id) {\n  var instance;\n\n  for (var i = 0; i < instances.length; i++) {\n    if (instances[i].id === id) {\n      instance = instances[i];\n      break;\n    }\n  }\n  return instance;\n}\n\nexport function isInstance(selector) {\n  return getInstances(selector).length > 0;\n}\n\nfunction normalizeType(types) {\n  // If '*' then fetch all registered section types\n  if (types === '*') {\n    types = Object.keys(registered);\n\n    // If a single section type string is passed, put it in an array\n  } else if (typeof types === 'string') {\n    types = [types];\n\n    // If single section constructor is passed, transform to array with section\n    // type string\n  } else if (types.constructor === Section) {\n    types = [types.prototype.type];\n\n    // If array of typed section constructors is passed, transform the array to\n    // type strings\n  } else if (Array.isArray(types) && types[0].constructor === Section) {\n    types = types.map(function(TypedSection) {\n      return TypedSection.prototype.type;\n    });\n  }\n\n  types = types.map(function(type) {\n    return type.toLowerCase();\n  });\n\n  return types;\n}\n\nfunction normalizeContainers(containers) {\n  // Nodelist with entries\n  if (NodeList.prototype.isPrototypeOf(containers) && containers.length > 0) {\n    containers = Array.prototype.slice.call(containers);\n\n    // Empty Nodelist\n  } else if (\n    NodeList.prototype.isPrototypeOf(containers) &&\n    containers.length === 0\n  ) {\n    containers = [];\n\n    // Handle null (document.querySelector() returns null with no match)\n  } else if (containers === null) {\n    containers = [];\n\n    // Single DOM element\n  } else if (!Array.isArray(containers) && containers instanceof Element) {\n    containers = [containers];\n  }\n\n  return containers;\n}\n\nif (window.Shopify.designMode) {\n  document.addEventListener('shopify:section:load', function(event) {\n    var id = event.detail.sectionId;\n    var container = event.target.querySelector(\n      '[' + SECTION_ID_ATTR + '=\"' + id + '\"]'\n    );\n\n    if (container !== null) {\n      load(container.getAttribute(SECTION_TYPE_ATTR), container);\n    }\n  });\n\n  document.addEventListener('shopify:section:unload', function(event) {\n    var id = event.detail.sectionId;\n    var container = event.target.querySelector(\n      '[' + SECTION_ID_ATTR + '=\"' + id + '\"]'\n    );\n    var instance = getInstances(container)[0];\n\n    if (typeof instance === 'object') {\n      unload(container);\n    }\n  });\n\n  document.addEventListener('shopify:section:select', function(event) {\n    var instance = getInstanceById(event.detail.sectionId);\n\n    if (typeof instance === 'object') {\n      instance.onSelect(event.detail.load);\n    }\n  });\n\n  document.addEventListener('shopify:section:deselect', function(event) {\n    var instance = getInstanceById(event.detail.sectionId);\n\n    if (typeof instance === 'object') {\n      instance.onDeselect();\n    }\n  });\n\n  document.addEventListener('shopify:block:select', function(event) {\n    var instance = getInstanceById(event.detail.sectionId);\n\n    if (typeof instance === 'object') {\n      instance.onBlockSelect(event.detail.blockId, event.detail.load);\n    }\n  });\n\n  document.addEventListener('shopify:block:deselect', function(event) {\n    var instance = getInstanceById(event.detail.sectionId);\n\n    if (typeof instance === 'object') {\n      instance.onBlockDeselect(event.detail.blockId);\n    }\n  });\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatMoney = formatMoney;\n/**\n * Currency Helpers\n * -----------------------------------------------------------------------------\n * A collection of useful functions that help with currency formatting\n *\n * Current contents\n * - formatMoney - Takes an amount in cents and returns it as a formatted dollar value.\n *\n */\n\nvar moneyFormat = '${{amount}}';\n\n/**\n * Format money values based on your shop currency settings\n * @param  {Number|string} cents - value in cents or dollar amount e.g. 300 cents\n * or 3.00 dollars\n * @param  {String} format - shop money_format setting\n * @return {String} value - formatted value\n */\nfunction formatMoney(cents, format) {\n  if (typeof cents === 'string') {\n    cents = cents.replace('.', '');\n  }\n  var value = '';\n  var placeholderRegex = /\\{\\{\\s*(\\w+)\\s*\\}\\}/;\n  var formatString = format || moneyFormat;\n\n  function formatWithDelimiters(number) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    var thousands = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';\n    var decimal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';\n\n    if (isNaN(number) || number == null) {\n      return 0;\n    }\n\n    number = (number / 100.0).toFixed(precision);\n\n    var parts = number.split('.');\n    var dollarsAmount = parts[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1' + thousands);\n    var centsAmount = parts[1] ? decimal + parts[1] : '';\n\n    return dollarsAmount + centsAmount;\n  }\n\n  switch (formatString.match(placeholderRegex)[1]) {\n    case 'amount':\n      value = formatWithDelimiters(cents, 2);\n      break;\n    case 'amount_no_decimals':\n      value = formatWithDelimiters(cents, 0);\n      break;\n    case 'amount_with_comma_separator':\n      value = formatWithDelimiters(cents, 2, '.', ',');\n      break;\n    case 'amount_no_decimals_with_comma_separator':\n      value = formatWithDelimiters(cents, 0, '.', ',');\n      break;\n  }\n\n  return formatString.replace(placeholderRegex, value);\n}\n","export default function Listeners() {\n  this.entries = [];\n}\n\nListeners.prototype.add = function(element, event, fn) {\n  this.entries.push({ element: element, event: event, fn: fn });\n  element.addEventListener(event, fn);\n};\n\nListeners.prototype.removeAll = function() {\n  this.entries = this.entries.filter(function(listener) {\n    listener.element.removeEventListener(listener.event, listener.fn);\n    return false;\n  });\n};\n","/**\n * Find a match in the project JSON (using a ID number) and return the variant (as an Object)\n * @param {Object} product Product JSON object\n * @param {Number} value Accepts Number (e.g. 6908023078973)\n * @returns {Object} The variant object once a match has been successful. Otherwise null will be return\n */\nexport function getVariantFromId(product, value) {\n  _validateProductStructure(product);\n\n  if (typeof value !== 'number') {\n    throw new TypeError(value + ' is not a Number.');\n  }\n\n  var result = product.variants.filter(function(variant) {\n    return variant.id === value;\n  });\n\n  return result[0] || null;\n}\n\n/**\n * Convert the Object (with 'name' and 'value' keys) into an Array of values, then find a match & return the variant (as an Object)\n * @param {Object} product Product JSON object\n * @param {Object} collection Object with 'name' and 'value' keys (e.g. [{ name: \"Size\", value: \"36\" }, { name: \"Color\", value: \"Black\" }])\n * @returns {Object || null} The variant object once a match has been successful. Otherwise null will be returned\n */\nexport function getVariantFromSerializedArray(product, collection) {\n  _validateProductStructure(product);\n\n  // If value is an array of options\n  var optionArray = _createOptionArrayFromOptionCollection(product, collection);\n  return getVariantFromOptionArray(product, optionArray);\n}\n\n/**\n * Find a match in the project JSON (using Array with option values) and return the variant (as an Object)\n * @param {Object} product Product JSON object\n * @param {Array} options List of submitted values (e.g. ['36', 'Black'])\n * @returns {Object || null} The variant object once a match has been successful. Otherwise null will be returned\n */\nexport function getVariantFromOptionArray(product, options) {\n  _validateProductStructure(product);\n  _validateOptionsArray(options);\n\n  var result = product.variants.filter(function(variant) {\n    return options.every(function(option, index) {\n      return variant.options[index] === option;\n    });\n  });\n\n  return result[0] || null;\n}\n\n/**\n * Creates an array of selected options from the object\n * Loops through the project.options and check if the \"option name\" exist (product.options.name) and matches the target\n * @param {Object} product Product JSON object\n * @param {Array} collection Array of object (e.g. [{ name: \"Size\", value: \"36\" }, { name: \"Color\", value: \"Black\" }])\n * @returns {Array} The result of the matched values. (e.g. ['36', 'Black'])\n */\nfunction _createOptionArrayFromOptionCollection(product, collection) {\n  _validateProductStructure(product);\n  _validateSerializedArray(collection);\n\n  var optionArray = [];\n\n  collection.forEach(function(option) {\n    for (var i = 0; i < product.options.length; i++) {\n      if (product.options[i].name.toLowerCase() === option.name.toLowerCase()) {\n        optionArray[i] = option.value;\n        break;\n      }\n    }\n  });\n\n  return optionArray;\n}\n\n/**\n * Check if the product data is a valid JS object\n * Error will be thrown if type is invalid\n * @param {Array} product Product JSON object\n */\nfunction _validateProductStructure(product) {\n  if (typeof product !== 'object') {\n    throw new TypeError(product + 'is not an object.');\n  }\n\n  if (Object.keys(product).length === 0 && product.constructor === Object) {\n    throw new Error(product + 'is empty.');\n  }\n}\n\n/**\n * Validate the structure of the array\n * It must be formatted like jQuery's serializeArray()\n * @param {Array} collection Array of object [{ name: \"Size\", value: \"36\" }, { name: \"Color\", value: \"Black\" }]\n */\nfunction _validateSerializedArray(collection) {\n  if (!Array.isArray(collection)) {\n    throw new TypeError(collection + 'is not an array.');\n  }\n\n  if (collection.length === 0) {\n    throw new Error(collection + 'is empty.');\n  }\n\n  if (collection[0].hasOwnProperty('name')) {\n    if (typeof collection[0].name !== 'string') {\n      throw new TypeError(\n        'Invalid value type passed for name of option ' +\n          collection[0].name +\n          '. Value should be string.'\n      );\n    }\n  } else {\n    throw new Error(collection[0] + 'does not contain name key.');\n  }\n}\n\n/**\n * Validate the structure of the array\n * It must be formatted as list of values\n * @param {Array} collection Array of object (e.g. ['36', 'Black'])\n */\nfunction _validateOptionsArray(options) {\n  if (Array.isArray(options) && typeof options[0] === 'object') {\n    throw new Error(options + 'is not a valid array of options.');\n  }\n}\n","import Listeners from './listeners';\nimport { getVariantFromSerializedArray } from '@shopify/theme-product';\n\nvar selectors = {\n  idInput: '[name=\"id\"]',\n  optionInput: '[name^=\"options\"]',\n  quantityInput: '[name=\"quantity\"]',\n  propertyInput: '[name^=\"properties\"]'\n};\n\n// Public Methods\n// -----------------------------------------------------------------------------\n\n/**\n * Returns a URL with a variant ID query parameter. Useful for updating window.history\n * with a new URL based on the currently select product variant.\n * @param {string} url - The URL you wish to append the variant ID to\n * @param {number} id  - The variant ID you wish to append to the URL\n * @returns {string} - The new url which includes the variant ID query parameter\n */\n\nexport function getUrlWithVariant(url, id) {\n  if (/variant=/.test(url)) {\n    return url.replace(/(variant=)[^&]+/, '$1' + id);\n  } else if (/\\?/.test(url)) {\n    return url.concat('&variant=').concat(id);\n  }\n\n  return url.concat('?variant=').concat(id);\n}\n\n/**\n * Constructor class that creates a new instance of a product form controller.\n *\n * @param {Element} element - DOM element which is equal to the <form> node wrapping product form inputs\n * @param {Object} product - A product object\n * @param {Object} options - Optional options object\n * @param {Function} options.onOptionChange - Callback for whenever an option input changes\n * @param {Function} options.onQuantityChange - Callback for whenever an quantity input changes\n * @param {Function} options.onPropertyChange - Callback for whenever a property input changes\n * @param {Function} options.onFormSubmit - Callback for whenever the product form is submitted\n */\nexport function ProductForm(element, product, options) {\n  this.element = element;\n  this.product = _validateProductObject(product);\n\n  options = options || {};\n\n  this._listeners = new Listeners();\n  this._listeners.add(\n    this.element,\n    'submit',\n    this._onSubmit.bind(this, options)\n  );\n\n  this.optionInputs = this._initInputs(\n    selectors.optionInput,\n    options.onOptionChange\n  );\n\n  this.quantityInputs = this._initInputs(\n    selectors.quantityInput,\n    options.onQuantityChange\n  );\n\n  this.propertyInputs = this._initInputs(\n    selectors.propertyInput,\n    options.onPropertyChange\n  );\n}\n\n/**\n * Cleans up all event handlers that were assigned when the Product Form was constructed.\n * Useful for use when a section needs to be reloaded in the theme editor.\n */\nProductForm.prototype.destroy = function() {\n  this._listeners.removeAll();\n};\n\n/**\n * Getter method which returns the array of currently selected option values\n *\n * @returns {Array} An array of option values\n */\nProductForm.prototype.options = function() {\n  return _serializeOptionValues(this.optionInputs, function(item) {\n    var regex = /(?:^(options\\[))(.*?)(?:\\])/;\n    item.name = regex.exec(item.name)[2]; // Use just the value between 'options[' and ']'\n    return item;\n  });\n};\n\n/**\n * Getter method which returns the currently selected variant, or `null` if variant\n * doesn't exist.\n *\n * @returns {Object|null} Variant object\n */\nProductForm.prototype.variant = function() {\n  return getVariantFromSerializedArray(this.product, this.options());\n};\n\n/**\n * Getter method which returns a collection of objects containing name and values\n * of property inputs\n *\n * @returns {Array} Collection of objects with name and value keys\n */\nProductForm.prototype.properties = function() {\n  var properties = _serializePropertyValues(this.propertyInputs, function(\n    propertyName\n  ) {\n    var regex = /(?:^(properties\\[))(.*?)(?:\\])/;\n    var name = regex.exec(propertyName)[2]; // Use just the value between 'properties[' and ']'\n    return name;\n  });\n\n  return Object.entries(properties).length === 0 ? null : properties;\n};\n\n/**\n * Getter method which returns the current quantity or 1 if no quantity input is\n * included in the form\n *\n * @returns {Array} Collection of objects with name and value keys\n */\nProductForm.prototype.quantity = function() {\n  return this.quantityInputs[0]\n    ? Number.parseInt(this.quantityInputs[0].value, 10)\n    : 1;\n};\n\n// Private Methods\n// -----------------------------------------------------------------------------\nProductForm.prototype._setIdInputValue = function(value) {\n  var idInputElement = this.element.querySelector(selectors.idInput);\n\n  if (!idInputElement) {\n    idInputElement = document.createElement('input');\n    idInputElement.type = 'hidden';\n    idInputElement.name = 'id';\n    this.element.appendChild(idInputElement);\n  }\n\n  idInputElement.value = value.toString();\n};\n\nProductForm.prototype._onSubmit = function(options, event) {\n  event.dataset = this._getProductFormEventData();\n\n  this._setIdInputValue(event.dataset.variant.id);\n\n  if (options.onFormSubmit) {\n    options.onFormSubmit(event);\n  }\n};\n\nProductForm.prototype._onFormEvent = function(cb) {\n  if (typeof cb === 'undefined') {\n    return Function.prototype;\n  }\n\n  return function(event) {\n    event.dataset = this._getProductFormEventData();\n    cb(event);\n  }.bind(this);\n};\n\nProductForm.prototype._initInputs = function(selector, cb) {\n  var elements = Array.prototype.slice.call(\n    this.element.querySelectorAll(selector)\n  );\n\n  return elements.map(\n    function(element) {\n      this._listeners.add(element, 'change', this._onFormEvent(cb));\n      return element;\n    }.bind(this)\n  );\n};\n\nProductForm.prototype._getProductFormEventData = function() {\n  return {\n    options: this.options(),\n    variant: this.variant(),\n    properties: this.properties(),\n    quantity: this.quantity()\n  };\n};\n\nfunction _serializeOptionValues(inputs, transform) {\n  return inputs.reduce(function(options, input) {\n    if (\n      input.checked || // If input is a checked (means type radio or checkbox)\n      (input.type !== 'radio' && input.type !== 'checkbox') // Or if its any other type of input\n    ) {\n      options.push(transform({ name: input.name, value: input.value }));\n    }\n\n    return options;\n  }, []);\n}\n\nfunction _serializePropertyValues(inputs, transform) {\n  return inputs.reduce(function(properties, input) {\n    if (\n      input.checked || // If input is a checked (means type radio or checkbox)\n      (input.type !== 'radio' && input.type !== 'checkbox') // Or if its any other type of input\n    ) {\n      properties[transform(input.name)] = input.value;\n    }\n\n    return properties;\n  }, {});\n}\n\nfunction _validateProductObject(product) {\n  if (typeof product !== 'object') {\n    throw new TypeError(product + ' is not an object.');\n  }\n\n  if (typeof product.variants[0].options === 'undefined') {\n    throw new TypeError(\n      'Product object is invalid. Make sure you use the product object that is output from {{ product | json }} or from the http://[your-product-url].js route'\n    );\n  }\n\n  return product;\n}\n","function getDefaultRequestConfig() {\n  return JSON.parse(\n    JSON.stringify({\n      credentials: 'same-origin',\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json;'\n      }\n    })\n  );\n}\n\nfunction fetchJSON(url, config) {\n  return fetch(url, config).then(function(response) {\n    if (!response.ok) {\n      throw response;\n    }\n    return response.json();\n  });\n}\n\nexport function cart() {\n  return fetchJSON('/cart.js', getDefaultRequestConfig());\n}\n\nexport function cartAdd(id, quantity, properties) {\n  var config = getDefaultRequestConfig();\n\n  config.method = 'POST';\n  config.body = JSON.stringify({\n    id: id,\n    quantity: quantity,\n    properties: properties\n  });\n\n  return fetchJSON('/cart/add.js', config);\n}\n\nexport function cartChange(line, options) {\n  var config = getDefaultRequestConfig();\n\n  options = options || {};\n\n  config.method = 'POST';\n  config.body = JSON.stringify({\n    line: line,\n    quantity: options.quantity,\n    properties: options.properties\n  });\n\n  return fetchJSON('/cart/change.js', config);\n}\n\nexport function cartClear() {\n  var config = getDefaultRequestConfig();\n  config.method = 'POST';\n\n  return fetchJSON('/cart/clear.js', config);\n}\n\nexport function cartUpdate(body) {\n  var config = getDefaultRequestConfig();\n\n  config.method = 'POST';\n  config.body = JSON.stringify(body);\n\n  return fetchJSON('/cart/update.js', config);\n}\n\nexport function cartShippingRates() {\n  return fetchJSON('/cart/shipping_rates.json', getDefaultRequestConfig());\n}\n","export function key(key) {\n  if (typeof key !== 'string' || key.split(':').length !== 2) {\n    throw new TypeError(\n      'Theme Cart: Provided key value is not a string with the format xxx:xxx'\n    );\n  }\n}\n\nexport function quantity(quantity) {\n  if (typeof quantity !== 'number') {\n    throw new TypeError(\n      'Theme Cart: An object which specifies a quantity or properties value is required'\n    );\n  }\n}\n\nexport function id(id) {\n  if (typeof id !== 'number') {\n    throw new TypeError('Theme Cart: Variant ID must be a number');\n  }\n}\n\nexport function properties(properties) {\n  if (typeof properties !== 'object') {\n    throw new TypeError('Theme Cart: Properties must be an object');\n  }\n}\n\nexport function options(options) {\n  if (typeof options !== 'object') {\n    throw new TypeError('Theme Cart: Options must be an object');\n  }\n\n  if (\n    typeof options.quantity === 'undefined' &&\n    typeof options.properties === 'undefined'\n  ) {\n    throw new Error(\n      'Theme Cart: You muse define a value for quantity or properties'\n    );\n  }\n\n  if (typeof options.quantity !== 'undefined') {\n    quantity(options.quantity);\n  }\n\n  if (typeof options.properties !== 'undefined') {\n    properties(options.properties);\n  }\n}\n","/**\n * Cart Template Script\n * ------------------------------------------------------------------------------\n * A file that contains scripts highly couple code to the Cart template.\n *\n * @namespace cart\n */\n\nimport * as request from './request';\nimport * as validate from './validate';\n\n/**\n * Returns the state object of the cart\n * @returns {Promise} Resolves with the state object of the cart (https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-cart)\n */\nexport function getState() {\n  return request.cart();\n}\n\n/**\n * Returns the index of the cart line item\n * @param {string} key The unique key of the line item\n * @returns {Promise} Resolves with the index number of the line item\n */\nexport function getItemIndex(key) {\n  validate.key(key);\n\n  return request.cart().then(function(state) {\n    var index = -1;\n\n    state.items.forEach(function(item, i) {\n      index = item.key === key ? i + 1 : index;\n    });\n\n    if (index === -1) {\n      return Promise.reject(\n        new Error('Theme Cart: Unable to match line item with provided key')\n      );\n    }\n\n    return index;\n  });\n}\n\n/**\n * Fetches the line item object\n * @param {string} key The unique key of the line item\n * @returns {Promise} Resolves with the line item object (See response of cart/add.js https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#add-to-cart)\n */\nexport function getItem(key) {\n  validate.key(key);\n\n  return request.cart().then(function(state) {\n    var lineItem = null;\n\n    state.items.forEach(function(item) {\n      lineItem = item.key === key ? item : lineItem;\n    });\n\n    if (lineItem === null) {\n      return Promise.reject(\n        new Error('Theme Cart: Unable to match line item with provided key')\n      );\n    }\n\n    return lineItem;\n  });\n}\n\n/**\n * Add a new line item to the cart\n * @param {number} id The variant's unique ID\n * @param {object} options Optional values to pass to /cart/add.js\n * @param {number} options.quantity The quantity of items to be added to the cart\n * @param {object} options.properties Line item property key/values (https://help.shopify.com/en/themes/liquid/objects/line_item#line_item-properties)\n * @returns {Promise} Resolves with the line item object (See response of cart/add.js https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#add-to-cart)\n */\nexport function addItem(id, options) {\n  options = options || {};\n\n  validate.id(id);\n\n  return request.cartAdd(id, options.quantity, options.properties);\n}\n\n/**\n * Changes the quantity and/or properties of an existing line item.\n * @param {string} key The unique key of the line item (https://help.shopify.com/en/themes/liquid/objects/line_item#line_item-key)\n * @param {object} options Optional values to pass to /cart/add.js\n * @param {number} options.quantity The quantity of items to be added to the cart\n * @param {object} options.properties Line item property key/values (https://help.shopify.com/en/themes/liquid/objects/line_item#line_item-properties)\n * @returns {Promise} Resolves with the state object of the cart (https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-cart)\n */\nexport function updateItem(key, options) {\n  validate.key(key);\n  validate.options(options);\n\n  return getItemIndex(key).then(function(line) {\n    return request.cartChange(line, options);\n  });\n}\n\n/**\n * Removes a line item from the cart\n * @param {string} key The unique key of the line item (https://help.shopify.com/en/themes/liquid/objects/line_item#line_item-key)\n * @returns {Promise} Resolves with the state object of the cart (https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-cart)\n */\nexport function removeItem(key) {\n  validate.key(key);\n\n  return getItemIndex(key).then(function(line) {\n    return request.cartChange(line, { quantity: 0 });\n  });\n}\n\n/**\n * Sets all quantities of all line items in the cart to zero. This does not remove cart attributes nor the cart note.\n * @returns {Promise} Resolves with the state object of the cart (https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-cart)\n */\nexport function clearItems() {\n  return request.cartClear();\n}\n\n/**\n * Gets all cart attributes\n * @returns {Promise} Resolves with the cart attributes object\n */\nexport function getAttributes() {\n  return request.cart().then(function(state) {\n    return state.attributes;\n  });\n}\n\n/**\n * Sets all cart attributes\n * @returns {Promise} Resolves with the cart state object\n */\nexport function updateAttributes(attributes) {\n  return request.cartUpdate({ attributes: attributes });\n}\n\n/**\n * Clears all cart attributes\n * @returns {Promise} Resolves with the cart state object\n */\nexport function clearAttributes() {\n  return getAttributes().then(function(attributes) {\n    for (var key in attributes) {\n      attributes[key] = '';\n    }\n    return updateAttributes(attributes);\n  });\n}\n\n/**\n * Gets cart note\n * @returns {Promise} Resolves with the cart note string\n */\nexport function getNote() {\n  return request.cart().then(function(state) {\n    return state.note;\n  });\n}\n\n/**\n * Sets cart note\n * @returns {Promise} Resolves with the cart state object\n */\nexport function updateNote(note) {\n  return request.cartUpdate({ note: note });\n}\n\n/**\n * Clears cart note\n * @returns {Promise} Resolves with the cart state object\n */\nexport function clearNote() {\n  return request.cartUpdate({ note: '' });\n}\n\n/**\n * Get estimated shipping rates.\n * @returns {Promise} Resolves with response of /cart/shipping_rates.json (https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#get-shipping-rates)\n */\nexport function getShippingRates() {\n  return request.cartShippingRates();\n}\n"],"sourceRoot":""}